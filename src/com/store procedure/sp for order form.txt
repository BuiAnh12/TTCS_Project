CREATE PROCEDURE GetInvoicesByStatusAndName
    @Status INT,
    @Name NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    IF @Status = 1
    BEGIN
        SELECT DISTINCT 
            i.InvoiceId, 
            c.CustomerId, 
            s.StaffId, 
            i.PurchaseDate, 
            c.CustomerName, 
            s.Name AS StaffName, 
            SUM(ii.TotalPrice) AS TotalAmount 
        FROM 
            Invoices i
        JOIN 
            Customers c ON c.CustomerId = i.CustomerId 
        JOIN 
            Staffs s ON s.StaffId = i.StaffId 
        JOIN 
            Invoice_Items ii ON ii.InvoiceId = i.InvoiceId 
        WHERE 
            c.CustomerName LIKE '%' + @Name + '%'
        GROUP BY 
            i.InvoiceId, 
            c.CustomerId, 
            s.StaffId, 
            i.PurchaseDate, 
            c.CustomerName, 
            s.Name
        ORDER BY 
            c.CustomerName;
    END
    ELSE IF @Status = 2
    BEGIN
        SELECT DISTINCT 
            i.InvoiceId, 
            c.CustomerId, 
            s.StaffId, 
            i.PurchaseDate, 
            c.CustomerName, 
            s.Name AS StaffName, 
            SUM(ii.TotalPrice) AS TotalAmount 
        FROM 
            Invoices i
        JOIN 
            Customers c ON c.CustomerId = i.CustomerId 
        JOIN 
            Staffs s ON s.StaffId = i.StaffId 
        JOIN 
            Invoice_Items ii ON ii.InvoiceId = i.InvoiceId 
        WHERE 
            c.CustomerName LIKE '%' + @Name + '%'
        GROUP BY 
            i.InvoiceId, 
            c.CustomerId, 
            s.StaffId, 
            i.PurchaseDate, 
            c.CustomerName, 
            s.Name
        ORDER BY 
            s.Name;
    END
    ELSE IF @Status = 3
    BEGIN
        SELECT DISTINCT 
            i.InvoiceId, 
            c.CustomerId, 
            s.StaffId, 
            i.PurchaseDate, 
            c.CustomerName, 
            s.Name AS StaffName, 
            SUM(ii.TotalPrice) AS TotalAmount 
        FROM 
            Invoices i
        JOIN 
            Customers c ON c.CustomerId = i.CustomerId 
        JOIN 
            Staffs s ON s.StaffId = i.StaffId 
        JOIN 
            Invoice_Items ii ON ii.InvoiceId = i.InvoiceId 
        WHERE 
            c.CustomerName LIKE '%' + @Name + '%'
        GROUP BY 
            i.InvoiceId, 
            c.CustomerId, 
            s.StaffId, 
            i.PurchaseDate, 
            c.CustomerName, 
            s.Name
        ORDER BY 
            SUM(ii.TotalPrice);
    END
END
CREATE PROCEDURE AddInvoice
    @CustomerId INT,
    @StaffId INT,
    @PurchaseDate DATE,
    @InvoiceId INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO Invoices (CustomerId, StaffId, PurchaseDate) 
    VALUES (@CustomerId, @StaffId, @PurchaseDate);

    SET @InvoiceId = SCOPE_IDENTITY();
END
CREATE PROCEDURE EditInvoice
    @CustomerId INT,
    @StaffId INT,
    @PurchaseDate DATE,
    @InvoiceId INT
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE Invoices
    SET 
        CustomerId = @CustomerId,
        StaffId = @StaffId,
        PurchaseDate = @PurchaseDate
    WHERE
        InvoiceId = @InvoiceId;
END
CREATE PROCEDURE DeleteInvoice
    @InvoiceId INT
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM Invoices
    WHERE InvoiceId = @InvoiceId;
END
CREATE PROCEDURE FindAvailableImports
    @ProductId INT,
    @Quantity INT
AS
BEGIN
    SET NOCOUNT ON;

    WITH t1 AS (
        SELECT TOP 1 i1.ImportId
        FROM Imports i1
        JOIN Imports i2 ON i1.ProductId = i2.ProductId AND i1.ExpiryDate >= i2.ExpiryDate
        WHERE i1.ProductId = @ProductId AND i1.AvailableQuantity > 0
        GROUP BY i1.ImportId
        HAVING SUM(i2.AvailableQuantity) >= @Quantity
    )
    SELECT *
    FROM Imports
    WHERE ProductId = @ProductId AND AvailableQuantity > 0
        AND ExpiryDate <= (
            SELECT ExpiryDate
            FROM Imports
            WHERE ImportId = (SELECT ImportId FROM t1)
        )
    ORDER BY ExpiryDate ASC;
END
public List<Import> findAvailableId(int productId, int quantity) throws SQLException {
    List<Import> listImport = new ArrayList<>();
    Connection cnn = ConnectionDB.getConnection();
    String storedProcedure = "{call FindAvailableImports(?, ?)}";

    try (CallableStatement statement = cnn.prepareCall(storedProcedure)) {
        statement.setInt(1, productId);
        statement.setInt(2, quantity);

        ResultSet re = statement.executeQuery();
        while (re.next()) {
            int productid = re.getInt("ProductId");
            java.sql.Date manuDate = re.getDate("ManufacturingDate");
            java.sql.Date exDate = re.getDate("ExpiryDate");
            java.sql.Date imDate = re.getDate("ImportDate");
            int importQuanity = re.getInt("ImportQuantity");
            int avaiableQuanity = re.getInt("AvailableQuantity");
            BigDecimal unitprice = re.getBigDecimal("UnitPrice");
            int id = re.getInt("ImportId");
            Import imports = new Import(id, productid, manuDate, exDate, imDate, importQuanity, avaiableQuanity, unitprice);
            listImport.add(imports);
        }
        return listImport;
    } catch (SQLException ex) {
        ex.printStackTrace();
        return null;
    } finally {
        if (cnn != null) {
            cnn.close(); // Close connection in finally block
        }
    }
}
CREATE PROCEDURE GetAllInvoiceItems
AS
BEGIN
    SET NOCOUNT ON;

    SELECT *
    FROM Invoice_Items;
END
CREATE PROCEDURE AddInvoiceItem
    @InvoiceId INT,
    @ImportId INT,
    @UnitPrice DECIMAL,
    @Quantity INT,
    @TotalPrice DECIMAL,
    @Profit DECIMAL
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO Invoice_Items (InvoiceId, ImportId, UnitPrice, Quantity, TotalPrice, Profit) 
    VALUES (@InvoiceId, @ImportId, @UnitPrice, @Quantity, @TotalPrice, @Profit);
END
CREATE PROCEDURE EditInvoiceItem
    @InvoiceId INT,
    @ImportId INT,
    @UnitPrice DECIMAL,
    @Quantity INT,
    @TotalPrice DECIMAL,
    @Profit DECIMAL,
    @InvoiceItemId INT
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE Invoice_Items
    SET 
        InvoiceId = @InvoiceId,
        ImportId = @ImportId,
        UnitPrice = @UnitPrice,
        Quantity = @Quantity,
        TotalPrice = @TotalPrice,
        Profit = @Profit
    WHERE
        InvoiceItemId = @InvoiceItemId;
END
